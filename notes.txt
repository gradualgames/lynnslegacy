This file is for collecting notes about the source code as we port the
game. It will be tricky otherwise to remember where things are. At
least at first.

***********************************************************************

This is the location of the map data structure.

    headers/ll/map_structures.bi:Type map_type


This is the location of the room data structure.

    LL/src/headers/ll/map_structures.bi:Type room_type


This is the location of the char_type structure.

    LL/src/headers/ll/object_structures.bi:226:Type char_type


This is the location of the VFile_Get overload for VFile_Vector:

    LL/src/headers/vfile.bi:72:Declare Function VFile_Get Overload ( ByVal h As Integer, ByVal p As Integer = -1, u As VFile_Vector ) As Integer
    LL/src/com/vfile.bas:487:Function VFile_Get Overload ( ByVal h As Integer, ByVal p As Integer = -1, ByRef u As VFile_Vector ) As Integer


This is a candidate for the function which loads .map files.

    src\com\ll_build.bas:434       Function load_mapV

    This function first loads the map's own file name as a String.
    FreeBASIC Strings appear to be formatted as a short little endian
    integer length followed by the characters of the string.

    Then, it loads two four byte integers, also little endian, denoting
    the number of entries, and the number of rooms.

    Then, it loads the tileset filename.

    Next, it is looping over all rooms. They all share the same tilset.

        Load the room's top left x coordinate.
        Load the room's top left y coordinate.
        Load the room's parallax. TODO: Not sure what this is or does.
        If parallax is nonzero, load the parallax image.
        Load the room's dark. TODO: Not sure what this is or does. Palette darken?
        Load the room's teleports count.
        Load the room's song. TODO: Is this an index into a global table of songs?
        Load the room's song_changes. TODO: Not sure what this is or does.
        Load the room's changes_to. TODO: Not sure what this is or does.
        Load the room's reserved. 17 byte structure. TODO: Not sure what this is or does.

            Next, loop over all teleports. Each teleport matches the teleport structure layout.

                Type teleport_type

                  x As Integer
                  y As Integer
                  w As Integer
                  h As Integer
                  to_room As Integer
                  to_map As String

                  dx As Integer
                  dy As Integer
                  dd As Integer

                  to_song As Integer

                  reserved( 19 ) As Integer


                End Type

        Load the room's seq_here. Integer. TODO: Not sure what this is or does.

        Load the room's enemies. Integer.

            Next, loop over all enemies.

                Load .x_origin Integer.
                Load .y_origin Integer.
                Load .id String.
                Load .direction Integer.
                Load .seq_here Integer.
                Load .spawn_h ushort.
                Load .is_h_set ushort.
                Load .chap Integer.
                Load .spawn_d Integer.
                Load .is_d_set Integer.
                Load .reserved_5 Integer.
                Call load_seqV with the open file. TODO: Must analyze this function.
                Load .spawn_cond Integer.
                If spawn_cond nonzero, then

                    Allocate a LLObject_ConditionalSpawn object.
                    Load spawn_info.wait_n Integer.

                    For loop_spawns = 0 to spawn_info.wait_n - 1

                        Load spawn_info.wait_spawn[loop_spawns].code_index uShort.
                        Load spawn_info.wait_spawn[loop_spawns].code_state Integer.

                    Load spawn_info.kill_n Integer.

                    For loop_spawns = 0 to spawn_info.kill_n - 1

                        Load spawn_info.kill_spawn[loop_spawns].code_index uShort.
                        Load spawn_info.kill_spawn[loop_spawns].code_state Integer.

                    Load spawn_info.active_n Integer.

                    For loop_spawns = 0 to spawn_info.active_n - 1

                        Load spawn_info.active_spawn[loop_spawns].code_index uShort.
                        Load spawn_info.active_spawn[loop_spawns].code_state Integer.

                EndIf

                .coords.x = .x_origin
                .coords.y = .y_origin

                .ori_dir = .direction

            End Next

        Then, it allocates .layout as 3 * len(integer ptr), which I think would be 12 bytes. Why?
        Looks like an array of 3 elements. Each one is a room_elem?

        Then, what on earth is this?

              Dim As Integer room_elem = ( _
                                           .x * ( .y + 1 ) + 1 _ '' y + 1 means extra row of padding.
                                         )                       '' doesnt matter why! it's necessary to avoid

        I believe it is calculating the number of room elements, which I believe are just
        integers in a big grid, probably indices into the current tile set.
        The formula is room.x * (room.y + 1) + 1 ? But what are those underscores?
        I discovered by running that line in FreeBASIC itself that the underscores are
        line continuations. The same line can be written as:

        Dim As Integer room_elem = (.x * ( .y + 1 ) + 1)

        Haha. What an ugly way to write this code!!!

        Then, allocate a buffer with room_elem elements.

        Then, for get_n_cpy = 0 to 2,

            .layout[get_n_cpy] is a new buffer whose size is (ubound(quickbuf) + 1) * 4 + 4096

            Next, we read the current layer of this room into quickbuf. Reading the VFile_Get
            and VF_Array source code (line numbers in this notes file), this amounts to a
            memcpy from the open file into the buffer.

            Next, for all room elements,
                .layout[get_n_cpy][elem] = quickbuf(elem)

            Why this isn't also a memcpy I'm not certain. Hmm, I think it is because the quickbuf
            which we read from the file is composed of uShort, but the actual elements of the current
            room layer are 4 byte Integers, so we can't do a memcpy here.
    Next Room

    Then, loop over all map entries...

        Load .x Integer.
        Load .y Integer.
        Load .room Integer.
        Load direction Byte.
        Load .seq_hereI Integer.
        Load .reserved (20 Integers so 80 bytes)

        Then call load_seqV to load .seq. TODO: Not sure what this is, but guessing we can leave this as
        a placeholder for later while we just try to load an entire map file.

    TODO: The next two loops are postprocessing, dealing with sequence ids. I don't know what sequences
    are, still. But I suspect we can deal with them later.

This function wraps the above function:

    src\com\ll_build.bas:1203 Function LLSystem_LoadMap


This function is for drawing a room (a sub object of maps?):

    LL/src/com/engine--gfx_LL.bas:942:Sub blit_room() Static

***********************************************************************
